{"name":"LISSA","tagline":"A Drupal based technology stack for real time messaging in second screen applications.","body":"# LISSA Kickstart Distribution\r\n\r\nLISSA is an open source technology stack for real time messaging in second\r\nscreen applications. It allows media providers to publish live and on-demand\r\nvideo streams and push related notifications to clients.\r\n\r\nThe LISSA Kickstart profile is a reusable Drupal 8 distribution for managing\r\nand publishing events and notifications. It comes pre-configured with the\r\nfollowing functionality:\r\n\r\n- Real-time push message API through the LISSA backend stack for publishing\r\n  live notifications.\r\n- REST API for publishing events.\r\n- REST API for publishing on-demand notifications.\r\n- A proof-of-concept for soccer matches with contextual soccer statistics.\r\n- Twitter integration for pushing notifications to a Twitter account.\r\n\r\nLISSA is separated into four projects:\r\n\r\n- [Kickstart](https://github.com/oneagency/lissa_kickstart): The Drupal installation profile for the backend interface.\r\n- [Infrastructure](https://github.com/oneagency/lissa_infrastructure): Vagrant and Chef scripts for provisioning a box with the services needed for running LISSA.\r\n- [Deploy](https://github.com/oneagency/lissa_deploy): Capistrano script for deploying LISSA Kickstart to a Vagrant box or remote servers.\r\n- [Worker](https://github.com/oneagency/lissa_worker): PHP script that parses and forwards notifications from a message queue to a push stream server. \r\n\r\n## Installation\r\n\r\n### Using Vagrant\r\n\r\nThe recommended way to install the LISSA distribution is by using the LISSA\r\n[infrastructure](https://github.com/oneagency/lissa_infrastructure) and\r\n[deploy](https://github.com/oneagency/lissa_deploy) repositories on GitHub.\r\nThe infrastructure repo will provision a Vagrant box containing all the\r\nrequired services and the deploy repo will install and configure a Drupal 8\r\ninstance with the LISSA Kickstart distribution.\r\n\r\n#### Requirements\r\n\r\n- Bundler\r\n- OSX: Xcode command line tools: xcode-select --install\r\n- Virtualbox 4.3.10+\r\n- Vagrant 1.6.3\r\n- vagrant-omnibus plugin\r\n- vagrant-hostsupdater plugin\r\n- Git\r\n\r\n#### Vagrant setup\r\n\r\n```bash\r\ngit clone https://github.com/oneagency/lissa_infrastructure\r\ncd lissa_infrastructure\r\nvagrant up --provision`\r\n```\r\n\r\n#### Drupal installation\r\n\r\n```bash\r\ngit clone https://github.com/oneagency/lissa_deploy\r\ncd lissa_deploy\r\nbundle install\r\nbundle exec cap local deploy\r\n```\r\n\r\n### Using Phing\r\n\r\nYou can set up the Drupal distribution with Phing following these steps:\r\n\r\n- cd to the root of this repository\r\n- Execute the following command: phing -Ddocroot=/path/to/docroot\r\n- Replace /path/to/docroot with the path of your virtual host.\r\n\r\nThe following steps will be executed:\r\n\r\n- Create a docroot directory under /path/to/docroot\r\n- Execute drush make on the build.make file\r\n  - Drush make will set up drupal 8 core\r\n  - Drush make will add the lissa_kickstart profile to the profiles directory\r\n  - Drush make will execute the lissa_kickstart.make file\r\n- Execute drush site-install with the parameters provided in\r\n  build.defaults.properties\r\n\r\n### Manual Installation\r\n\r\nIf you decide to install LISSA Kickstart manually please keep the following\r\nthings in mind:\r\n\r\n- Use the Drupal core version specified in the build.make file. Other versions\r\n  of Drupal 8 may not be compatible.\r\n- Install the contrib modules specified in the lissa_kickstart.make file.\r\n- Install the services (see the [infrastructure repo](https://github.com/oneagency/lissa_infrastructure))\r\n  for versions and configuration):\r\n  - A RabbitMQ server\r\n  - An Nginx push stream server\r\n  - A service running the [worker PHP script](https://github.com/oneagency/lissa_worker)\r\n\r\n\r\n### Server Installation\r\n\r\nYou can provision your own server for a LISSA Kickstart installation by using\r\nthe [infrastructure](https://github.com/oneagency/lissa_infrastructure) repo\r\non GitHub. This contains a set of Chef cookbooks with all the necessary services\r\nfor running the full LISSA technology stack.\r\n\r\nAfter provisioning a server you can clone the\r\n[deploy](https://github.com/oneagency/lissa_deploy) repository for deploying the\r\ndistribution using capistrano.\r\n\r\n#### Distributed Servers\r\n\r\nThe [infrastructure](https://github.com/oneagency/lissa_infrastructure) repo\r\nhas support for provisioning the backend across multiple servers. See the\r\ndocumentation included with the repository for more information.\r\n\r\n## Demo\r\n\r\nYou can test the application using the demo web client located at <http://admin.lissa.dev/profiles/lissa_kickstart/test/client/demo.html>.\r\n\r\nThe test web application will:\r\n\r\n- Load all events from the Drupal 8 REST event API.\r\n- Load all existing notifications from the Drupal 8 REST notification API.\r\n- Set up websocket connections to all events.\r\n\r\nNotifications added to events will show up automatically in the test web application.\r\n\r\n## Architecture\r\n\r\n![LISSA Component Diagram](doc/component-diagram.png)\r\n\r\nThe LISSA stack is divided in the following components:\r\n \r\n### Drupal 8\r\n\r\nThe administration backend where operators manage events and notifications.\r\nUsing the views and rest modules it also provides a REST API for fetching all\r\npublished events and past notifications.\r\n\r\nRuns on port 80 in the default infrastructure single server setup, login with admin/admin in the local setup:\r\n\r\n<http://admin.lissa.dev>\r\n\r\n### RabbitMQ MessageQueue\r\n\r\nA message queue for storing and forwarding the real time notifications to\r\nclients. External services like Facebook, Twitter or other Drupal sites can\r\nplugin to the queue to send additional data in real time to clients.\r\n\r\nRuns on port 15672 in the default infrastructure single server setup, login with guest/guest in the local setup:\r\n\r\n<http://admin.lissa.dev:15672>\r\n\r\n### PHP Worker\r\n\r\nParses the notifications from the message queue and forwards them to the nginx\r\npush stream server. This can be used for additional processing prior to sending\r\nthe data to clients. It also increases scalability by providing multiple\r\nworkers.\r\n\r\nThere's an implementation that is set up either using the infrastructure repo or\r\nby running the worker.php script from the [worker repo](https://github.com/oneagency/lissa_worker)\r\nusing a process manager like supervisord.\r\n\r\n### Nginx push stream server\r\n\r\nAllows websocket connections for pushing the notification to clients.\r\n\r\nRuns on port 8080 with the following endpoints:\r\n\r\n- /publish/uuid: publish notifications to all clients\r\n- /ws/uuid: websocket endpoint for clients.\r\n\r\nuuid can be replaced by the UUID of the event node a clients wants to receive\r\nnotifications from.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}