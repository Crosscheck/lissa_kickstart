<?php
/**
 * @file
 * The module that sends content created events to the message bus
 *
 */

use \Drupal\Core\Entity\EntityInterface;
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;

/**
 * Implements hook_entity_insert()
 */
function notification_push_entity_insert(EntityInterface $notification) {
  if ($notification->getEntityTypeId() == 'notification_entity') {
    notification_push_notify($notification);
  }
}

/**
 * Implements hook_entity_update()
 */
function notification_push_entity_update(EntityInterface $notification) {
  if ($notification->getEntityTypeId() == 'notification_entity') {
    notification_push_notify($notification, 'update');
  }
}

/**
 * Implements hook_entity_delete()
 */
function notification_push_entity_delete(EntityInterface $notification) {
  if ($notification->getEntityTypeId() == 'notification_entity') {
    notification_push_notify($notification, 'delete');
  }
}

/**
 * Pushes an entity to an AMQP server.
 *
 * @param EntityInterface $notification
 *   The entity to push.
 * @param string $action
 *   The action associated with the entity. Can be one of:
 *   - create
 *   - update
 *   - delete
 */
function notification_push_notify(EntityInterface $notification, $action = 'create') {
  $config = \Drupal::config('notification_push.settings');
  $connection = new AMQPConnection($config->get('host'), $config->get('port'), $config->get('user'), $config->get('password'));
  $channel = $connection->channel();

  $channel->queue_declare('content_notification', FALSE, FALSE, FALSE, FALSE);

  $serializer = \Drupal::service('serializer');
  $output = $serializer->serialize($notification, 'json');
  $properties = array(
    'type' => $action,
  );

  $channel->basic_publish(new AMQPMessage($output, $properties), '', 'content_notification');
  \Drupal::logger('notification_push')->info(t('!action: !entity_label', array(
    '!action' => $action,
    '!entity_label' => $notification->label(),
  )));

  $channel->close();
  $connection->close();
}
